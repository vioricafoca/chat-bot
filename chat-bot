<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Chatbot</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/material-design-iconic-font/2.2.0/css/material-design-iconic-font.min.css">
  <link rel="stylesheet" href="https://cdn.yourdomain.com/path/to/chat.css">
  <script src="https://cdn.yourdomain.com/path/to/chat.js" defer></script>
</head>
<body>
  <div id="chat" class="bpw-layout">
    <div class="bpw-header-container">
      <div class="bpw-header-name">Chat bot</div>
      <div class="bpw-header-icons">
        <button type="button" tabindex="-1" id="btn-delete" class="bpw-header-icon bpw-header-icon-delete">
          <i>
            <svg xmlns="http://www.w3.org/2000/svg" width="15" height="20" viewBox="0 0 20 20" fill="currentColor">
              <path d="M0 0h24v24H0z" fill="none" />
              <path d="M21 11H7.41l5.3-5.29a1 1 0 0 0-1.42-1.42l-7 7a1 1 0 0 0 0 1.42l7 7a1 1 0 0 0 1.42-1.42L7.41 13H21a1 1 0 1 0 0-2z" />
            </svg>
          </i>
        </button>
        <button onclick="toggleChat()">
          <div class="bg-close" style="width: 20px; height: 20px;"></div>
        </button>
      </div>
    </div>
    <div id="messages" class="bpw-chat-container"></div>
    <div class="input-section-wrapper" id="input-section-wrapper">
      <div class="bpw-suggestions" id="suggestions">
        <div class="bpw-suggestion" onclick="fillInput('What is the weather today?')">What is the weather today?</div>
        <div class="bpw-suggestion" onclick="fillInput('How can I contact support?')">How can I contact support?</div>
        <div class="bpw-suggestion" onclick="fillInput('Tell me a joke')">Tell me a joke</div>
      </div>
      <div class="dotsContainer" id="loading-animation">
        <span id="dot1"></span>
        <span id="dot2"></span>
        <span id="dot3"></span>
      </div>
      <div class="input-section" id="input-section">
        <div class="bpw-composer-container">
          <div class="bpw-composer">
            <textarea id="user-input" placeholder="Type a message..." oninput="handleInputChange(event)" onkeypress="handleKeyPress(event)"></textarea>
            <button id="send-button" class="bpw-send-button" onclick="sendMessage()">
              <i class="zmdi zmdi-mail-send"></i>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="chat-icon" class="bpw-widget-btn" onclick="toggleChat()"><i class="fas fa-comment"></i></div>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const deleteButton = document.getElementById("btn-delete");
      deleteButton.addEventListener("click", confirmAndClearChat);
    });

    function confirmAndClearChat() {
      if (confirm("Are you sure you want to delete the chat? This action cannot be undone.")) {
        clearChat();
      }
    }

    function clearChat() {
      const messagesDiv = document.getElementById("messages");
      messagesDiv.innerHTML = "";
      startConversation();
    }

    function toggleChat() {
      const chat = document.getElementById("chat");
      const chatIcon = document.getElementById("chat-icon");
      if (chat.style.display === "none" || chat.style.display === "") {
        chat.style.display = "block";
        requestAnimationFrame(() => {
          chat.style.transform = "scale(1)";
          chat.style.opacity = "1";
          chatIcon.style.display = "none";
          if (isChatEmpty()) {
            startConversation();
          }
        });
      } else {
        chat.style.transform = "scale(0)";
        chat.style.opacity = "0";
        chat.addEventListener("transitionend", () => {
          chat.style.display = "none";
          chatIcon.style.display = "flex";
          chatIcon.classList.add("appear");
        }, { once: true });
      }
    }

    function startConversation() {
      const initialMessages = [
        "Greetings! I am Mrs. Chatnel, your dedicated chatbot design assistant. I am here to assist you in creating a splendid and stylish chatbot for your website.",
        "Would you like a guided tour of the webchat styler, or are you already familiar with its capabilities? :dancer:"
      ];
      displayMessageSequentially(initialMessages, 0);
    }

    function displayMessageSequentially(messages, index) {
      if (index < messages.length) {
        displayMessage("Bot", messages[index], () => {
          displayMessageSequentially(messages, index + 1);
        });
      }
    }

    function isChatEmpty() {
      const messagesDiv = document.getElementById("messages");
      return messagesDiv.children.length === 0;
    }

    async function sendMessage() {
      const input = document.getElementById("user-input").value;
      if (input.trim() === "") return;
      fadeOutSuggestions();
      displayMessage("User", input);
      document.getElementById("user-input").value = "";
      const botResponse = await fetchBotResponse(input);
      setTimeout(() => {
        hideLoadingIndicator();
        displayMessage("Bot", botResponse);
        showSuggestions();
      }, 1000);
    }

    function displayLoadingIndicator() {
      const dotsContainer = document.querySelector(".dotsContainer");
      dotsContainer.style.display = "flex";
    }

    function hideLoadingIndicator() {
      const dotsContainer = document.querySelector(".dotsContainer");
      dotsContainer.style.display = "none";
    }

    function fadeOutSuggestions() {
      const suggestions = document.getElementById("suggestions");
      suggestions.style.opacity = "0";
      setTimeout(() => {
        suggestions.style.display = "none";
        displayLoadingIndicator();
      }, 500);
    }

    function showSuggestions() {
      const suggestions = document.getElementById("suggestions");
      suggestions.style.display = "block";
      setTimeout(() => {
        suggestions.style.opacity = "1";
      }, 10);
      adjustInputSectionPosition();
    }

    async function fetchBotResponse(userInput) {
      let botResponse = "I did not understand that.";
      try {
        const response = await fetch("https://api.openai.com/v1/chat/completions", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer YOUR_API_KEY`
          },
          body: JSON.stringify({
            model: "gpt-4",
            messages: [
              { role: "system", content: "You are a helpful assistant." },
              { role: "user", content: userInput }
            ],
            max_tokens: 150
          })
        });
        const data = await response.json();
        console.log("API Response:", data);
        if (data.choices && data.choices.length > 0) {
          botResponse = data.choices[0].message.content.trim();
        } else {
          console.error("No choices in response:", data);
        }
      } catch (error) {
        botResponse = "Sorry, I'm having trouble connecting to the server.";
        console.error("Error fetching bot response:", error);
      }
      return botResponse;
    }

    function displayMessage(sender, message, callback) {
      const messagesDiv = document.getElementById("messages");
      const messageDiv = document.createElement("div");
      messageDiv.className = `message ${sender.toLowerCase()} w3-animate-bottom`;
      const profilePic = document.createElement("div");
      profilePic.className = "profile-pic";
      profilePic.style.backgroundImage = sender === "Bot" ? "url('https://sg8ebf.p3cdn2.secureserver.net/wp-content/uploads/2013/05/Virtual-Assistant.jpg')" : "url('https://via.placeholder.com/40/0000FF/FFFFFF?text=U')";
      const messageContent = document.createElement("div");
      messageContent.className = "message-content";
      messageContent.innerText = message;
      messageDiv.appendChild(profilePic);
      messageDiv.appendChild(messageContent);
      messagesDiv.insertBefore(messageDiv, messagesDiv.firstChild);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
      if (callback) {
        messageDiv.addEventListener("animationend", callback, { once: true });
      }
    }

    function fillInput(suggestion) {
      document.getElementById("user-input").value = suggestion;
      sendMessage();
    }

    function handleInputChange(event) {
      const sendButton = document.getElementById("send-button");
      const input = event.target.value.trim();
      if (input.length > 0) {
        sendButton.classList.add("visible");
      } else {
        sendButton.classList.remove("visible");
      }
    }

    function handleKeyPress(event) {
      if (event.key === "Enter") {
        sendMessage();
      }
    }

    function adjustInputSectionPosition() {
      const inputSectionWrapper = document.getElementById("input-section-wrapper");
      const suggestions = document.getElementById("suggestions");
      const messages = document.getElementById("messages");
      if (suggestions.style.display === "none") {
        messages.classList.add("no-suggestions");
      } else {
        messages.classList.remove("no-suggestions");
      }
    }
  </script>
</body>
</html>
